(()=>{"use strict";var e={772:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(537),r=n.n(a),o=n(645),s=n.n(o)()(r());s.push([e.id,"* {\n  box-sizing: border-box;\n}\n\n#content {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.board {\n  display: grid;\n  grid-template-rows: repeat(10, 25px);\n  grid-template-columns: repeat(10, 25px);\n  margin-bottom: 20px;\n}\n\n.board-tile {\n  border: 1px solid black;\n}\n\n.player-ship {\n  background-color: green;\n}\n\n.hit {\n  background-color: red;\n}\n\n.miss {\n  background-color: aqua;\n}\n\n.game-over-screen {\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  width: 100vw;\n  height: 100vh;\n  z-index: 1;\n  background-color: silver;\n  border: 3px solid black;\n}/*# sourceMappingURL=styles.css.map */","",{version:3,sources:["webpack://./src/styles/styles.scss","webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;EACE,sBAAA;ACCF;;ADCA;EACE,aAAA;EACA,sBAAA;EACA,uBAAA;EACA,mBAAA;ACEF;;ADAA;EACE,aAAA;EACA,oCAAA;EAEA,uCAAA;EAEA,mBAAA;ACCF;;ADCA;EACE,uBAAA;ACEF;;ADCA;EACE,uBAAA;ACEF;;ADAA;EACE,qBAAA;ACGF;;ADDA;EACE,sBAAA;ACIF;;ADDA;EACE,kBAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,sBAAA;EACA,YAAA;EACA,aAAA;EAEA,UAAA;EACA,wBAAA;EACA,uBAAA;ACGF,CAAA,qCAAA",sourceRoot:""}]);const c=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,r,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(a)for(var c=0;c<this.length;c++){var i=this[c][0];null!=i&&(s[i]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);a&&s[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(r," */"),s=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(s).concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var o={},s=[],c=0;c<e.length;c++){var i=e[c],l=a.base?i[0]+a.base:i[0],d=o[l]||0,u="".concat(l," ").concat(d);o[l]=d+1;var A=n(u),p={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var f=r(p,a);a.byIndex=c,t.splice(c,0,{identifier:u,updater:f,references:1})}s.push(u)}return s}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var o=a(e=e||[],r=r||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var c=n(o[s]);t[c].references--}for(var i=a(e,r),l=0;l<o.length;l++){var d=n(o[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}o=i}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,r&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var o=t[a]={id:a,exports:{}};return e[a](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),a=n(795),r=n.n(a),o=n(569),s=n.n(o),c=n(565),i=n.n(c),l=n(216),d=n.n(l),u=n(589),A=n.n(u),p=n(772),f={};f.styleTagTransform=A(),f.setAttributes=i(),f.insert=s().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=d(),t()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;const h={generateDom:function(e,t){let n=document.querySelector("#content"),a=document.createElement("h1");a.textContent="opponent";let r=document.createElement("h1");r.textContent="player";let o=document.createElement("div");o.classList.add("board");let s=document.createElement("div");s.classList.add("board");for(let a=0;a<100;a++){let r=document.createElement("button");r.classList.add("board-tile","neutral"),r.dataset.tileNumber=a,r.addEventListener("click",(r=>{e.attack(a,t);let o=t.gameBoard.usedAttacks.find((e=>e.index===a));r.target.classList.add(o.status);let s=t.cpuAttack(e),c=e.gameBoard.usedAttacks.find((e=>e.index===s));if(document.querySelectorAll(".player-tile").forEach((e=>{e.dataset.tileNumber==c.index&&e.classList.add(c.status)})),t.gameBoard.loss){let e=document.createElement("div");e.classList.add("game-over-screen");let t=document.createElement("h2");t.textContent="You Win";let a=document.createElement("button");a.textContent="Play Again",a.addEventListener("click",(()=>{location.reload()})),e.appendChild(t),e.appendChild(a),n.appendChild(e)}if(e.gameBoard.loss){let e=document.createElement("div");e.classList.add("game-over-screen");let t=document.createElement("h2");t.textContent="You Win";let a=document.createElement("button");a.textContent="Play Again",a.addEventListener("click",(()=>{location.reload()})),e.appendChild(t),e.appendChild(a),n.appendChild(e)}}),{once:!0}),o.appendChild(r)}for(let t=0;t<100;t++){let n=document.createElement("button");n.classList.add("board-tile","neutral","player-tile"),n.dataset.tileNumber=t,e.gameBoard.ships.forEach((e=>{e.location.forEach((e=>{e==t&&n.classList.add("player-ship")}))})),s.appendChild(n)}n.appendChild(a),n.appendChild(o),n.appendChild(r),n.appendChild(s)}},m=h,v=function(e){return{location:e,length:e.length,timesHit:0,sunk:!1,hit:function(){this.timesHit=this.timesHit+1,this.timesHit!==this.length||this.isSunk()},isSunk:function(){return this.sunk=!0,!0}}},C=function(e,t){let n=function(e){let t=[];for(let e=0;e<100;e++)t.push(e);let n=e,a=[];return{loss:!1,board:t,ships:n,usedAttacks:a,placeShip:function(){},checkLoss:function(){0===this.ships.length&&(this.loss=!0)},receiveAttack:function(e){a.find((t=>t===e));let t=a.length;n.forEach((t=>{t.location.forEach((n=>{n===e&&(t.hit(),this.usedAttacks.push({index:e,status:"hit"})),!0===t.sunk&&(this.ships=this.ships.filter((e=>!e.sunk)),this.checkLoss())}))})),a.length===t&&this.usedAttacks.push({index:e,status:"miss"})}}}(t),a=[];for(let e=0;e<100;e++)a.push(e);return function(e){for(var t=e.length-1;t>0;t--){var n=Math.floor(Math.random()*(t+1)),a=e[t];e[t]=e[n],e[n]=a}}(a),{cpuAttacks:a,gameBoard:n,type:e,attack:function(e,t){t.gameBoard.receiveAttack(e)},cpuAttack:function(e){let t=this.cpuAttacks.shift();return e.gameBoard.receiveAttack(t),t}}},E=function(){const e=[v([62,72]),v([52,53,54]),v([35,45,55]),v([1,2,3,4]),v([91,92,93,94,95])],t=[v([62,72]),v([52,53,54]),v([35,45,55]),v([1,2,3,4]),v([91,92,93,94,95])],n=C("player",e),a=C("cpu",t);m.generateDom(n,a)};document.querySelector("#content"),E()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,